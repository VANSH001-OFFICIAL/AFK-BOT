const mineflayer = require('mineflayer');
const { pathfinder, Movements, goals } = require('mineflayer-pathfinder');
const http = require('http'); 

// --- тЪЩя╕П рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди (Environment Variables рдХрд╛ рдЙрдкрдпреЛрдЧ) ---
// --- тЪЩя╕П рдХреЙрдиреНрдлрд╝рд┐рдЧрд░реЗрд╢рди (Hardcoded Values рдХреЗ рд╕рд╛рде) ---
const BOT_CONFIG = {
    // рдЖрдкрдХрд╛ рд╕рд░реНрд╡рд░ IP/рдбреЛрдореЗрди рдХреЛрдЯреЗрд╢рди рдорд╛рд░реНрдХреНрд╕ ('') рдХреЗ рдЕрдВрджрд░ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред
    host: 'Vansh2041.aternos.me',  
    // рдкреЛрд░реНрдЯ рдирдВрдмрд░ рдХреЛ рд╕реАрдзрд╛ рд╕рдВрдЦреНрдпрд╛ рдХреЗ рд░реВрдк рдореЗрдВ рд▓рд┐рдЦреЗрдВред
    port: 45423,               
    // рдЖрдкрдХрд╛ рдпреВрдЬрд╝рд░рдиреЗрдо рдХреЛрдЯреЗрд╢рди рдорд╛рд░реНрдХреНрд╕ ('') рдХреЗ рдЕрдВрджрд░ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдПред
    username: 'AFKBot',   
    
    // рдЕрдЧрд░ рдЖрдкрдХреЗ рд╕рд░реНрд╡рд░ рдХреЛ рдкрд╛рд╕рд╡рд░реНрдб рдЪрд╛рд╣рд┐рдП, рддреЛ рдпрд╣ Environment Variable рд╕реЗ рдЖрдПрдЧрд╛
    password: process.env.MC_PASSWORD, 
};

// ... рдмрд╛рдХреА code рдпрд╣рд╛рдБ рд╕реЗ рдЬрд╛рд░реА рд░рд╣реЗрдЧрд╛ред

// рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рд╣реЛрд╕реНрдЯ рд╕реЗрдЯ рд╣реИ
if (!BOT_CONFIG.host) {
    console.error("тЭМ ERROR: MC_HOST Environment Variable is not set. Please set it in the Render dashboard.");
    process.exit(1);
}


const bot = mineflayer.createBot(BOT_CONFIG);
bot.loadPlugin(pathfinder);
let isAfkMoving = false;

// --- ЁЯМР Render рдХреЛ рд╕рдХреНрд░рд┐рдп рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП Web Server ---
// рдпрд╣ рд╕рд░реНрд╡рд░ Uptime Robot рдЬреИрд╕реЗ рдЯреВрд▓ рд╕реЗ рдкрд┐рдВрдЧ рд░рд┐рд╕реАрд╡ рдХрд░рдХреЗ Render рдХреЛ рд╕реЛрдиреЗ рд╕реЗ рд░реЛрдХреЗрдЧрд╛ред

const PORT = process.env.PORT || 3000;

http.createServer((req, res) => {
    // рд╣рд░ рдкрд┐рдВрдЧ рдкрд░ 200 OK рдЬрд╡рд╛рдм рднреЗрдЬреЗрдВ
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Minecraft AFK Bot is alive!');
}).listen(PORT, () => {
    console.log(`ЁЯЪА Render web server started on port ${PORT}. Bot is ready for pings.`);
});


// --- ЁЯЪА рдореБрдЦреНрдп рдЗрд╡реЗрдВрдЯ рд╣реИрдВрдбрд▓рд░ ---

bot.on('spawn', () => {
    console.log(`тЬЕ ${bot.username} рд╕рд░реНрд╡рд░ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреБрдбрд╝ рдЧрдпрд╛!`);
    
    // Pathfinder setup
    const mcData = require('minecraft-data')(bot.version);
    bot.pathfinder.setMovements(new Movements(bot, mcData));

    startAfkMovement();
    startPeriodicChat();
});

bot.on('chat', (username, message) => {
    if (username === bot.username) return; 
    if (message.includes('hello bot') || message.includes('hi bot')) {
        bot.chat(`Hello, ${username}! рдореИрдВ AFK рдкрд░ рд╣реВрдБ.`);
    }
});

bot.on('kicked', (reason) => console.log(`тЭМ рдХрд┐рдХ рдХрд┐рдпрд╛ рдЧрдпрд╛: ${reason}`));
bot.on('error', (err) => console.error(`тЭМ рдПрд░рд░: ${err.message}`));
bot.on('end', () => console.log('ЁЯЫС рдбрд┐рд╕рдХрдиреЗрдХреНрдЯ рд╣реБрдЖ.'));


// --- ЁЯЪ╢ AFK рдореВрд╡рдореЗрдВрдЯ рд▓реЙрдЬрд┐рдХ ---

function startAfkMovement() {
    if (isAfkMoving) return;
    isAfkMoving = true;
    
    const controls = ['forward', 'back', 'left', 'right', 'jump'];
    
    const movementLoop = () => {
        if (!isAfkMoving || bot.isSleeping) {
            controls.forEach(control => bot.setControlState(control, false));
            return;
        }

        controls.forEach(control => bot.setControlState(control, false));

        const randomControl = controls[Math.floor(Math.random() * controls.length)];
        const duration = Math.random() * 3000 + 1000; 

        bot.setControlState(randomControl, true);
        
        setTimeout(() => {
            bot.setControlState(randomControl, false);
            setTimeout(movementLoop, 500); 
        }, duration);
    };

    movementLoop();
}

// --- ЁЯТм рдЪреИрдЯ рд▓реЙрдЬрд┐рдХ ---

function startPeriodicChat() {
    const messages = [
        "рдмрд╕ AFK рдкрд░ рд╣реВрдБ! рдореИрдВ рд╕рдХреНрд░рд┐рдп рд╣реВрдБ!", 
        "рд╕рд░реНрд╡рд░ рдкрд░ рд╕рднреА рдХреЛ рдирдорд╕реНрдХрд╛рд░!", 
        "AFK рдЪреЗрдХ: рдкрд╛рд╕"
    ];

    setInterval(() => {
        if (!bot.isSleeping) {
            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
            bot.chat(randomMessage);
        }
    }, 10 * 60 * 1000); // 10 minutes
}

// --- ЁЯЫМ рд░рд╛рдд рдореЗрдВ рд╕реЛрдиреЗ рдХрд╛ рд▓реЙрдЬрд┐рдХ ---

bot.on('time', () => {
    const timeOfDay = bot.time.timeOfDay;
    const isNight = timeOfDay > 12500 && timeOfDay < 23460;

    if (isNight && !bot.isSleeping && bot.pathfinder.isGoalSet() === false) {
        attemptToSleep();
    }
});

async function attemptToSleep() {
    const bedBlock = bot.findBlock({
        matching: block => bot.registry.beds.includes(block.name),
        maxDistance: 32,
    });

    if (!bedBlock) return;

    try {
        isAfkMoving = false;
        await bot.pathfinder.goto(new goals.GoalGetToBlock(bedBlock.position.x, bedBlock.position.y, bedBlock.position.z));
        await bot.sleep(bedBlock);
        console.log("ЁЯТд рдмреЗрдб рдореЗрдВ рдкреНрд░рд╡реЗрд╢ рдХрд┐рдпрд╛ред");

    } catch (err) {
        bot.pathfinder.stop(); 
    }
}

bot.on('wake', () => {
    console.log("тШАя╕П рд╕реБрдмрд╣ рд╣реЛ рдЧрдИ, рдЙрда рдЧрдпрд╛ рд╣реВрдБ!");
    isAfkMoving = true;
    startAfkMovement();
});
